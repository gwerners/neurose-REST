/* Generated by re2c 0.16 on Tue Aug  2 22:36:27 2016 */
#line 1 "request.re.c"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <time.h>
#include <sys/time.h>
#include <time.h>
#include <unistd.h>

#include "request.h"
#include "jsmn.h"


#include <uuid/uuid.h>


//DEFINES
#define YYCTYPE        char
#define YYPEEK()       (cursor >= limit ? 0 : *cursor)
#define YYSKIP()       ++cursor
#define YYBACKUP()     marker = cursor
#define YYBACKUPCTX()  ctxmarker = cursor
#define YYRESTORE()    cursor = marker
#define YYRESTORECTX() cursor = ctxmarker

#define prn_entry(NAME)\
    printf("%s=%*.*s\n",#NAME,0,e->NAME.end-e->NAME.start,js+e->NAME.start);
#define prn_item(NAME)\
    printf("\t%s=%*.*s\n",#NAME,0,il->i.NAME.end-il->i.NAME.start,js+il->i.NAME.start);
#define prn_transaction(NAME)\
    printf("\t%s=%*.*s\n",#NAME,0,tl->t.NAME.end-tl->t.NAME.start,js+tl->t.NAME.start);
	
const char* gwf_json=
"{   \"id\" : \"b8d36032-42d9-11e6-9d7c-f04da2e5162d\","
"   \"number\" : \"1\","
"   \"reference\" : \"x\","
"   \"status\" : \"CLOSED\","
"   \"created_at\" : \"2016-07-05 15:40:14.010\","
"   \"updated_at\" : \"2016-07-05T15:40:14.055Z\","
"   \"items\" : ["
"      { "
"         \"sku\" : \"b8d36032-42d9-11e6-9d7c-f04da2e5162d\","
"         \"unit_price\" : 1000,"
"         \"quantity\" : 10"
"      }  "
"   ] ,"
"   \"notes\" : \"\","
"   \"transactions\" : ["
"      { "
"         \"id\" : \"b8d36032-42d9-11e6-9d7c-f04da2e5162d\","
"         \"external_id\" : \"sbrubles\","
"         \"amount\" : 1000,"
"         \"type\" : \"PAYMENT|CANCEL\","
"         \"authorization_code\" : \"94721719\","
"         \"card_brand\" : \"AMEX\" ,"
"         \"card_bin\" : \"710\","
"         \"card_last\" : \"4749\""
"      } "
"   ],"
"   \"price\" : 1000}"
;

#define iNC(VLR)do{++VLR;if(VLR>=r)return JSMN_ERROR_INVAL;}while(0);

int gen_uuid(char*out)
{

  uuid_t uuid;

  if(out)
  {
    // generate
#if defined(__APPLE__)
    uuid_generate_time(uuid);
#else
    uuid_generate_time_safe(uuid);
#endif
    //"1b4e28ba-2fa1-11d2-883f-0016d3cca427" + "\0"
    uuid_unparse_lower(uuid, out);
    IFDBG printf("gen_uuid uuid=%s\n", out);
    strcpy(out,(char*)out);
    return strlen((char*)out);
  }
  return 0;
}
int parse_method(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   #line 110 "request.re.c"

   
#line 96 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy3;
	case 'G':
	case 'g':	goto yy5;
	case 'P':
	case 'p':	goto yy6;
	default:	goto yy2;
	}
yy2:
#line 112 "request.re.c"
	{ id=0 ;goto lbl_end;}
#line 113 "<stdout>"
yy3:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy7;
	default:	goto yy4;
	}
yy4:
	YYRESTORE ();
	goto yy2;
yy5:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy8;
	default:	goto yy4;
	}
yy6:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy9;
	case 'U':
	case 'u':	goto yy10;
	default:	goto yy4;
	}
yy7:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'L':
	case 'l':	goto yy11;
	default:	goto yy4;
	}
yy8:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy12;
	default:	goto yy4;
	}
yy9:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy14;
	default:	goto yy4;
	}
yy10:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy15;
	default:	goto yy4;
	}
yy11:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy17;
	default:	goto yy4;
	}
yy12:
	YYSKIP ();
#line 113 "request.re.c"
	{ id=GET_METHOD;goto lbl_end;}
#line 187 "<stdout>"
yy14:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy18;
	default:	goto yy4;
	}
yy15:
	YYSKIP ();
#line 115 "request.re.c"
	{ id=PUT_METHOD;goto lbl_end;}
#line 200 "<stdout>"
yy17:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy20;
	default:	goto yy4;
	}
yy18:
	YYSKIP ();
#line 114 "request.re.c"
	{ id=POST_METHOD;goto lbl_end;}
#line 213 "<stdout>"
yy20:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy21;
	default:	goto yy4;
	}
yy21:
	YYSKIP ();
#line 116 "request.re.c"
	{ id=DELETE_METHOD;goto lbl_end;}
#line 226 "<stdout>"
}
#line 117 "request.re.c"

lbl_end:
   return id;
}

int check_uuid(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   
#line 239 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy26;
	default:	goto yy25;
	}
yy25:
#line 128 "request.re.c"
	{ id=0; goto lbl_end;}
#line 272 "<stdout>"
yy26:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy28;
	default:	goto yy27;
	}
yy27:
	YYRESTORE ();
	goto yy25;
yy28:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy29;
	default:	goto yy27;
	}
yy29:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy30;
	default:	goto yy27;
	}
yy30:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy31;
	default:	goto yy27;
	}
yy31:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy32;
	default:	goto yy27;
	}
yy32:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy33;
	default:	goto yy27;
	}
yy33:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy34;
	default:	goto yy27;
	}
yy34:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '-':	goto yy35;
	default:	goto yy27;
	}
yy35:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy36;
	default:	goto yy27;
	}
yy36:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy37;
	default:	goto yy27;
	}
yy37:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy38;
	default:	goto yy27;
	}
yy38:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy39;
	default:	goto yy27;
	}
yy39:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '-':	goto yy40;
	default:	goto yy27;
	}
yy40:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy41;
	default:	goto yy27;
	}
yy41:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy42;
	default:	goto yy27;
	}
yy42:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy43;
	default:	goto yy27;
	}
yy43:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy44;
	default:	goto yy27;
	}
yy44:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '-':	goto yy45;
	default:	goto yy27;
	}
yy45:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy46;
	default:	goto yy27;
	}
yy46:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy47;
	default:	goto yy27;
	}
yy47:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy48;
	default:	goto yy27;
	}
yy48:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy49;
	default:	goto yy27;
	}
yy49:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '-':	goto yy50;
	default:	goto yy27;
	}
yy50:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy51;
	default:	goto yy27;
	}
yy51:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy52;
	default:	goto yy27;
	}
yy52:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy53;
	default:	goto yy27;
	}
yy53:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy54;
	default:	goto yy27;
	}
yy54:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy55;
	default:	goto yy27;
	}
yy55:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy56;
	default:	goto yy27;
	}
yy56:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy57;
	default:	goto yy27;
	}
yy57:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy58;
	default:	goto yy27;
	}
yy58:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy59;
	default:	goto yy27;
	}
yy59:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy60;
	default:	goto yy27;
	}
yy60:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy61;
	default:	goto yy27;
	}
yy61:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':	goto yy62;
	default:	goto yy27;
	}
yy62:
	YYSKIP ();
#line 129 "request.re.c"
	{ return 36;}
#line 1176 "<stdout>"
}
#line 130 "request.re.c"

lbl_end:
   return id;
}

int check_get_subitem(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   
#line 1189 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy67;
	case 'T':
	case 't':	goto yy69;
	default:	goto yy66;
	}
yy66:
#line 141 "request.re.c"
	{ id=0; goto lbl_end;}
#line 1204 "<stdout>"
yy67:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy70;
	default:	goto yy68;
	}
yy68:
	YYRESTORE ();
	goto yy66;
yy69:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy71;
	default:	goto yy68;
	}
yy70:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy72;
	default:	goto yy68;
	}
yy71:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy73;
	default:	goto yy68;
	}
yy72:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'M':
	case 'm':	goto yy74;
	default:	goto yy68;
	}
yy73:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy75;
	default:	goto yy68;
	}
yy74:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy76;
	default:	goto yy68;
	}
yy75:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy78;
	default:	goto yy68;
	}
yy76:
	YYSKIP ();
#line 142 "request.re.c"
	{ return GET_ITEMS;}
#line 1276 "<stdout>"
yy78:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy79;
	default:	goto yy68;
	}
yy79:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy80;
	default:	goto yy68;
	}
yy80:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy81;
	default:	goto yy68;
	}
yy81:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy82;
	default:	goto yy68;
	}
yy82:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy83;
	default:	goto yy68;
	}
yy83:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy84;
	default:	goto yy68;
	}
yy84:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy85;
	default:	goto yy68;
	}
yy85:
	YYSKIP ();
#line 143 "request.re.c"
	{ return GET_TRANSACTIONS;}
#line 1337 "<stdout>"
}
#line 144 "request.re.c"

lbl_end:
   return id;
}

int check_put_subitem(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   
#line 1350 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy90;
	default:	goto yy89;
	}
yy89:
#line 155 "request.re.c"
	{ id=0; goto lbl_end;}
#line 1363 "<stdout>"
yy90:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy92;
	default:	goto yy91;
	}
yy91:
	YYRESTORE ();
	goto yy89;
yy92:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy93;
	default:	goto yy91;
	}
yy93:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy94;
	default:	goto yy91;
	}
yy94:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy95;
	default:	goto yy91;
	}
yy95:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy96;
	default:	goto yy91;
	}
yy96:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy97;
	default:	goto yy91;
	}
yy97:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy98;
	default:	goto yy91;
	}
yy98:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy99;
	default:	goto yy91;
	}
yy99:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy100;
	default:	goto yy91;
	}
yy100:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy101;
	default:	goto yy91;
	}
yy101:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy102;
	default:	goto yy91;
	}
yy102:
	YYSKIP ();
#line 156 "request.re.c"
	{ return PUT_TRANSACTIONS;}
#line 1459 "<stdout>"
}
#line 157 "request.re.c"

lbl_end:
   return id;
}

int parse_get_url(const char * cursor, const char * const limit,request *r)
{
    const char * marker=cursor;
    int id=0,ret;
    
#line 1472 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case '/':	goto yy107;
	default:	goto yy106;
	}
yy106:
#line 169 "request.re.c"
	{ id=0 ;goto lbl_end;}
#line 1484 "<stdout>"
yy107:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy109;
	default:	goto yy108;
	}
yy108:
	YYRESTORE ();
	goto yy106;
yy109:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy110;
	default:	goto yy108;
	}
yy110:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy111;
	default:	goto yy108;
	}
yy111:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy112;
	default:	goto yy108;
	}
yy112:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy113;
	default:	goto yy108;
	}
yy113:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy114;
	default:	goto yy108;
	}
yy114:
	YYSKIP ();
	switch ((yych = YYPEEK ())) {
	case '/':	goto yy116;
	case '?':	goto yy118;
	default:	goto yy115;
	}
yy115:
#line 205 "request.re.c"
	{id=GET_ALL;}
#line 1546 "<stdout>"
yy116:
	YYSKIP ();
#line 171 "request.re.c"
	{
        r->id.start=cursor-marker;
        marker=cursor;
        ret=check_uuid(cursor,limit);
        if(ret==36)
        {
            r->id.end=r->id.start+36;
            cursor+=36;
            IFDBG printf("GET [%d]found UUID[%*.*s]\n",ret,0,r->id.end-r->id.start,marker);
            if(*cursor=='/')
            {
                ++cursor;
            }
            ret=check_get_subitem(cursor,limit);
            IFDBG printf("%d cursor[%s]\n",ret,cursor);
            switch(ret)
            {
                case GET_ITEMS:
					IFDBG printf("found get items\n");
					return GET_ITEMS;
                case GET_TRANSACTIONS:
					IFDBG printf("found get transactions\n");
					return GET_TRANSACTIONS;
                default:
                    IFDBG printf("default get sub item\n");
                    break;
            }
            return GET_BY_ID;
        }else{
            r->id.end=(cursor-marker)+36;
            IFDBG printf("[%d]NOT found UUID[%*.*s]\n",ret,0,r->id.end-r->id.start,marker);
        }
        goto lbl_end;
    }
#line 1584 "<stdout>"
yy118:
	YYSKIP ();
#line 170 "request.re.c"
	{r->id.start=marker-cursor; id=GET_BY_VALUE;goto lbl_end;}
#line 1589 "<stdout>"
}
#line 206 "request.re.c"

lbl_end:
   return id;
}

int parse_put_url(const char * cursor, const char * const limit,request *r)
{
    const char * marker=cursor;
    int id=0,ret;
    
#line 1602 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case '/':	goto yy123;
	default:	goto yy122;
	}
yy122:
#line 216 "request.re.c"
	{ id=0 ;goto lbl_end;}
#line 1614 "<stdout>"
yy123:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy125;
	default:	goto yy124;
	}
yy124:
	YYRESTORE ();
	goto yy122;
yy125:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy126;
	default:	goto yy124;
	}
yy126:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy127;
	default:	goto yy124;
	}
yy127:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy128;
	default:	goto yy124;
	}
yy128:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy129;
	default:	goto yy124;
	}
yy129:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy130;
	default:	goto yy124;
	}
yy130:
	YYSKIP ();
	switch ((yych = YYPEEK ())) {
	case '/':	goto yy132;
	default:	goto yy131;
	}
yy131:
#line 259 "request.re.c"
	{id=PUT_ALL;}
#line 1675 "<stdout>"
yy132:
	YYSKIP ();
#line 217 "request.re.c"
	{
        r->id.start=cursor-marker;
        marker=cursor;
        ret=check_uuid(cursor,limit);
        if(ret==36)
        {
            r->id.end=r->id.start+36;
            cursor+=36;
            IFDBG printf("PUT [%d]found ID UUID [%*.*s]\n",ret,0,r->id.end-r->id.start,marker);
            if(*cursor=='/')
            {
                ++cursor;
            }
            ret=check_put_subitem(cursor,limit);
            IFDBG printf("%d cursor[%s]\n",ret,cursor);
            switch(ret)
            {
                case PUT_TRANSACTIONS:
					IFDBG printf("found put transactions\n");
					cursor+=13;// advance "transactions/"
			        r->id.start=(cursor-marker);
			        marker=cursor;
			        ret=check_uuid(cursor,limit);
			        if(ret==36)
					{
			            r->tid.end=r->tid.start+36;
			            cursor+=36;
			            IFDBG printf("PUT [%d]found TID UUID[%*.*s]\n",ret,0,r->tid.end-r->tid.start,marker);
					}else{
						IFDBG printf("[%d]error processing put transaction id[%s]\n",ret,cursor+13);
					}
					return PUT_TRANSACTIONS;
                default:
                    break;
            }
            return PUT_BY_ID;
        }else{
            r->id.end=(cursor-marker)+36;
            IFDBG printf("[%d]NOT found UUID[%*.*s]\n",ret,0,r->id.end-r->id.start,marker);
        }
        goto lbl_end;
    }
#line 1721 "<stdout>"
}
#line 260 "request.re.c"

lbl_end:
   return id;
}

int parse_items(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   
#line 1734 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'Q':
	case 'q':	goto yy137;
	case 'S':
	case 's':	goto yy139;
	case 'U':
	case 'u':	goto yy140;
	default:	goto yy136;
	}
yy136:
#line 270 "request.re.c"
	{ id=0 ;goto lbl_end;}
#line 1751 "<stdout>"
yy137:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'U':
	case 'u':	goto yy141;
	default:	goto yy138;
	}
yy138:
	YYRESTORE ();
	goto yy136;
yy139:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'K':
	case 'k':	goto yy142;
	default:	goto yy138;
	}
yy140:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy143;
	default:	goto yy138;
	}
yy141:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy144;
	default:	goto yy138;
	}
yy142:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'U':
	case 'u':	goto yy145;
	default:	goto yy138;
	}
yy143:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy147;
	default:	goto yy138;
	}
yy144:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy148;
	default:	goto yy138;
	}
yy145:
	YYSKIP ();
#line 271 "request.re.c"
	{ id=11;goto lbl_end;}
#line 1815 "<stdout>"
yy147:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy149;
	default:	goto yy138;
	}
yy148:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy150;
	default:	goto yy138;
	}
yy149:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '_':	goto yy151;
	default:	goto yy138;
	}
yy150:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy152;
	default:	goto yy138;
	}
yy151:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'P':
	case 'p':	goto yy153;
	default:	goto yy138;
	}
yy152:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy154;
	default:	goto yy138;
	}
yy153:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy155;
	default:	goto yy138;
	}
yy154:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'Y':
	case 'y':	goto yy156;
	default:	goto yy138;
	}
yy155:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy158;
	default:	goto yy138;
	}
yy156:
	YYSKIP ();
#line 273 "request.re.c"
	{ id=13;goto lbl_end;}
#line 1891 "<stdout>"
yy158:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy159;
	default:	goto yy138;
	}
yy159:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy160;
	default:	goto yy138;
	}
yy160:
	YYSKIP ();
#line 272 "request.re.c"
	{ id=12;goto lbl_end;}
#line 1912 "<stdout>"
}
#line 274 "request.re.c"

lbl_end:
   return id;
}

int parse_transactions(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   
#line 1925 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy165;
	case 'C':
	case 'c':	goto yy167;
	case 'E':
	case 'e':	goto yy168;
	case 'I':
	case 'i':	goto yy169;
	case 'T':
	case 't':	goto yy170;
	default:	goto yy164;
	}
yy164:
#line 284 "request.re.c"
	{ id=0 ;goto lbl_end;}
#line 1946 "<stdout>"
yy165:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'M':
	case 'm':	goto yy171;
	case 'U':
	case 'u':	goto yy172;
	default:	goto yy166;
	}
yy166:
	YYRESTORE ();
	goto yy164;
yy167:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy173;
	default:	goto yy166;
	}
yy168:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'X':
	case 'x':	goto yy174;
	default:	goto yy166;
	}
yy169:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy175;
	default:	goto yy166;
	}
yy170:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'Y':
	case 'y':	goto yy177;
	default:	goto yy166;
	}
yy171:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy178;
	default:	goto yy166;
	}
yy172:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy179;
	default:	goto yy166;
	}
yy173:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy180;
	default:	goto yy166;
	}
yy174:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy181;
	default:	goto yy166;
	}
yy175:
	YYSKIP ();
#line 285 "request.re.c"
	{ id=14;goto lbl_end;}
#line 2028 "<stdout>"
yy177:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'P':
	case 'p':	goto yy182;
	default:	goto yy166;
	}
yy178:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'U':
	case 'u':	goto yy183;
	default:	goto yy166;
	}
yy179:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'H':
	case 'h':	goto yy184;
	default:	goto yy166;
	}
yy180:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy185;
	default:	goto yy166;
	}
yy181:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy186;
	default:	goto yy166;
	}
yy182:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy187;
	default:	goto yy166;
	}
yy183:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy189;
	default:	goto yy166;
	}
yy184:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy190;
	default:	goto yy166;
	}
yy185:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '_':	goto yy191;
	default:	goto yy166;
	}
yy186:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy192;
	default:	goto yy166;
	}
yy187:
	YYSKIP ();
#line 288 "request.re.c"
	{ id=17;goto lbl_end;}
#line 2112 "<stdout>"
yy189:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy193;
	default:	goto yy166;
	}
yy190:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy195;
	default:	goto yy166;
	}
yy191:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'B':
	case 'b':	goto yy196;
	case 'L':
	case 'l':	goto yy197;
	default:	goto yy166;
	}
yy192:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy198;
	default:	goto yy166;
	}
yy193:
	YYSKIP ();
#line 287 "request.re.c"
	{ id=16;goto lbl_end;}
#line 2151 "<stdout>"
yy195:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy199;
	default:	goto yy166;
	}
yy196:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy200;
	case 'R':
	case 'r':	goto yy201;
	default:	goto yy166;
	}
yy197:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy202;
	default:	goto yy166;
	}
yy198:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy203;
	default:	goto yy166;
	}
yy199:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'Z':
	case 'z':	goto yy204;
	default:	goto yy166;
	}
yy200:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy205;
	default:	goto yy166;
	}
yy201:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy207;
	default:	goto yy166;
	}
yy202:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy208;
	default:	goto yy166;
	}
yy203:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'L':
	case 'l':	goto yy209;
	default:	goto yy166;
	}
yy204:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy210;
	default:	goto yy166;
	}
yy205:
	YYSKIP ();
#line 291 "request.re.c"
	{ id=20;goto lbl_end;}
#line 2238 "<stdout>"
yy207:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy211;
	default:	goto yy166;
	}
yy208:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy212;
	default:	goto yy166;
	}
yy209:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '_':	goto yy214;
	default:	goto yy166;
	}
yy210:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy215;
	default:	goto yy166;
	}
yy211:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy216;
	default:	goto yy166;
	}
yy212:
	YYSKIP ();
#line 292 "request.re.c"
	{ id=21;goto lbl_end;}
#line 2282 "<stdout>"
yy214:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy218;
	default:	goto yy166;
	}
yy215:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy219;
	default:	goto yy166;
	}
yy216:
	YYSKIP ();
#line 290 "request.re.c"
	{ id=19;goto lbl_end;}
#line 2303 "<stdout>"
yy218:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy220;
	default:	goto yy166;
	}
yy219:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy222;
	default:	goto yy166;
	}
yy220:
	YYSKIP ();
#line 286 "request.re.c"
	{ id=15;goto lbl_end;}
#line 2324 "<stdout>"
yy222:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy223;
	default:	goto yy166;
	}
yy223:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '_':	goto yy224;
	default:	goto yy166;
	}
yy224:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy225;
	default:	goto yy166;
	}
yy225:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy226;
	default:	goto yy166;
	}
yy226:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy227;
	default:	goto yy166;
	}
yy227:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy228;
	default:	goto yy166;
	}
yy228:
	YYSKIP ();
#line 289 "request.re.c"
	{ id=18;goto lbl_end;}
#line 2376 "<stdout>"
}
#line 293 "request.re.c"

lbl_end:
   return id;
}

int parse_id(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;

   
#line 2390 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy233;
	case 'I':
	case 'i':	goto yy235;
	case 'N':
	case 'n':	goto yy236;
	case 'P':
	case 'p':	goto yy237;
	case 'R':
	case 'r':	goto yy238;
	case 'S':
	case 's':	goto yy239;
	case 'T':
	case 't':	goto yy240;
	case 'U':
	case 'u':	goto yy241;
	default:	goto yy232;
	}
yy232:
#line 304 "request.re.c"
	{ id=0; goto lbl_end;}
#line 2417 "<stdout>"
yy233:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy242;
	default:	goto yy234;
	}
yy234:
	YYRESTORE ();
	goto yy232;
yy235:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy243;
	case 'T':
	case 't':	goto yy245;
	default:	goto yy234;
	}
yy236:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy246;
	case 'U':
	case 'u':	goto yy247;
	default:	goto yy234;
	}
yy237:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy248;
	default:	goto yy234;
	}
yy238:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy249;
	default:	goto yy234;
	}
yy239:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy250;
	default:	goto yy234;
	}
yy240:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy251;
	default:	goto yy234;
	}
yy241:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'P':
	case 'p':	goto yy252;
	default:	goto yy234;
	}
yy242:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy253;
	default:	goto yy234;
	}
yy243:
	YYSKIP ();
#line 305 "request.re.c"
	{ id=1; goto lbl_end;}
#line 2501 "<stdout>"
yy245:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy254;
	default:	goto yy234;
	}
yy246:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy255;
	default:	goto yy234;
	}
yy247:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'M':
	case 'm':	goto yy256;
	default:	goto yy234;
	}
yy248:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy257;
	default:	goto yy234;
	}
yy249:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'F':
	case 'f':	goto yy258;
	default:	goto yy234;
	}
yy250:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy259;
	default:	goto yy234;
	}
yy251:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy260;
	default:	goto yy234;
	}
yy252:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy261;
	default:	goto yy234;
	}
yy253:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy262;
	default:	goto yy234;
	}
yy254:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'M':
	case 'm':	goto yy263;
	default:	goto yy234;
	}
yy255:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy264;
	default:	goto yy234;
	}
yy256:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'B':
	case 'b':	goto yy265;
	default:	goto yy234;
	}
yy257:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy266;
	default:	goto yy234;
	}
yy258:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy267;
	default:	goto yy234;
	}
yy259:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy268;
	default:	goto yy234;
	}
yy260:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy269;
	default:	goto yy234;
	}
yy261:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy270;
	default:	goto yy234;
	}
yy262:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy271;
	default:	goto yy234;
	}
yy263:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy272;
	default:	goto yy234;
	}
yy264:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy274;
	default:	goto yy234;
	}
yy265:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy276;
	default:	goto yy234;
	}
yy266:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy277;
	default:	goto yy234;
	}
yy267:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy279;
	default:	goto yy234;
	}
yy268:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'U':
	case 'u':	goto yy280;
	default:	goto yy234;
	}
yy269:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy281;
	default:	goto yy234;
	}
yy270:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy282;
	default:	goto yy234;
	}
yy271:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy283;
	default:	goto yy234;
	}
yy272:
	YYSKIP ();
#line 311 "request.re.c"
	{ id=7; goto lbl_end;}
#line 2722 "<stdout>"
yy274:
	YYSKIP ();
#line 312 "request.re.c"
	{ id=8; goto lbl_end;}
#line 2727 "<stdout>"
yy276:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy284;
	default:	goto yy234;
	}
yy277:
	YYSKIP ();
#line 314 "request.re.c"
	{ id=10;goto lbl_end;}
#line 2740 "<stdout>"
yy279:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy286;
	default:	goto yy234;
	}
yy280:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy287;
	default:	goto yy234;
	}
yy281:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy289;
	default:	goto yy234;
	}
yy282:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy290;
	default:	goto yy234;
	}
yy283:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy291;
	default:	goto yy234;
	}
yy284:
	YYSKIP ();
#line 306 "request.re.c"
	{ id=2; goto lbl_end;}
#line 2785 "<stdout>"
yy286:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy292;
	default:	goto yy234;
	}
yy287:
	YYSKIP ();
#line 308 "request.re.c"
	{ id=4; goto lbl_end;}
#line 2798 "<stdout>"
yy289:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy293;
	default:	goto yy234;
	}
yy290:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy294;
	default:	goto yy234;
	}
yy291:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '_':	goto yy295;
	default:	goto yy234;
	}
yy292:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy296;
	default:	goto yy234;
	}
yy293:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy297;
	default:	goto yy234;
	}
yy294:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '_':	goto yy298;
	default:	goto yy234;
	}
yy295:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy299;
	default:	goto yy234;
	}
yy296:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy300;
	default:	goto yy234;
	}
yy297:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy302;
	default:	goto yy234;
	}
yy298:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy303;
	default:	goto yy234;
	}
yy299:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy304;
	default:	goto yy234;
	}
yy300:
	YYSKIP ();
#line 307 "request.re.c"
	{ id=3; goto lbl_end;}
#line 2889 "<stdout>"
yy302:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy306;
	default:	goto yy234;
	}
yy303:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy307;
	default:	goto yy234;
	}
yy304:
	YYSKIP ();
#line 309 "request.re.c"
	{ id=5; goto lbl_end;}
#line 2910 "<stdout>"
yy306:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy309;
	default:	goto yy234;
	}
yy307:
	YYSKIP ();
#line 310 "request.re.c"
	{ id=6; goto lbl_end;}
#line 2923 "<stdout>"
yy309:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy310;
	default:	goto yy234;
	}
yy310:
	YYSKIP ();
#line 313 "request.re.c"
	{ id=9; goto lbl_end;}
#line 2936 "<stdout>"
}
#line 315 "request.re.c"

lbl_end:
   return id;
}

int check_status(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   
#line 2949 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy315;
	case 'C':
	case 'c':	goto yy317;
	case 'D':
	case 'd':	goto yy318;
	case 'E':
	case 'e':	goto yy319;
	case 'P':
	case 'p':	goto yy320;
	case 'R':
	case 'r':	goto yy321;
	default:	goto yy314;
	}
yy314:
#line 326 "request.re.c"
	{ id=0; goto lbl_end;}
#line 2972 "<stdout>"
yy315:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'P':
	case 'p':	goto yy322;
	default:	goto yy316;
	}
yy316:
	YYRESTORE ();
	goto yy314;
yy317:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy323;
	case 'L':
	case 'l':	goto yy324;
	default:	goto yy316;
	}
yy318:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy325;
	default:	goto yy316;
	}
yy319:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy326;
	default:	goto yy316;
	}
yy320:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy327;
	default:	goto yy316;
	}
yy321:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy328;
	default:	goto yy316;
	}
yy322:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'P':
	case 'p':	goto yy329;
	default:	goto yy316;
	}
yy323:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy330;
	default:	goto yy316;
	}
yy324:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy331;
	default:	goto yy316;
	}
yy325:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy332;
	default:	goto yy316;
	}
yy326:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy333;
	default:	goto yy316;
	}
yy327:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'I':
	case 'i':	goto yy334;
	default:	goto yy316;
	}
yy328:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '-':	goto yy335;
	case 'J':
	case 'j':	goto yy336;
	default:	goto yy316;
	}
yy329:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy337;
	default:	goto yy316;
	}
yy330:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy338;
	default:	goto yy316;
	}
yy331:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'S':
	case 's':	goto yy339;
	default:	goto yy316;
	}
yy332:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'F':
	case 'f':	goto yy340;
	default:	goto yy316;
	}
yy333:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy341;
	default:	goto yy316;
	}
yy334:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy342;
	default:	goto yy316;
	}
yy335:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy344;
	default:	goto yy316;
	}
yy336:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy345;
	default:	goto yy316;
	}
yy337:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'O':
	case 'o':	goto yy346;
	default:	goto yy316;
	}
yy338:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy347;
	default:	goto yy316;
	}
yy339:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy348;
	default:	goto yy316;
	}
yy340:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy349;
	default:	goto yy316;
	}
yy341:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy351;
	default:	goto yy316;
	}
yy342:
	YYSKIP ();
#line 330 "request.re.c"
	{ id=1<<4; goto lbl_end;}
#line 3191 "<stdout>"
yy344:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy352;
	default:	goto yy316;
	}
yy345:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy353;
	default:	goto yy316;
	}
yy346:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'V':
	case 'v':	goto yy354;
	default:	goto yy316;
	}
yy347:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'L':
	case 'l':	goto yy355;
	default:	goto yy316;
	}
yy348:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy356;
	default:	goto yy316;
	}
yy349:
	YYSKIP ();
#line 327 "request.re.c"
	{ id=1; goto lbl_end;}
#line 3236 "<stdout>"
yy351:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy358;
	default:	goto yy316;
	}
yy352:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy359;
	default:	goto yy316;
	}
yy353:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy360;
	default:	goto yy316;
	}
yy354:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy361;
	default:	goto yy316;
	}
yy355:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy362;
	default:	goto yy316;
	}
yy356:
	YYSKIP ();
#line 334 "request.re.c"
	{ id=1<<8; goto lbl_end;}
#line 3281 "<stdout>"
yy358:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy363;
	default:	goto yy316;
	}
yy359:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy365;
	default:	goto yy316;
	}
yy360:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy366;
	default:	goto yy316;
	}
yy361:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy367;
	default:	goto yy316;
	}
yy362:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy369;
	default:	goto yy316;
	}
yy363:
	YYSKIP ();
#line 328 "request.re.c"
	{ id=1<<2; goto lbl_end;}
#line 3326 "<stdout>"
yy365:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'R':
	case 'r':	goto yy371;
	default:	goto yy316;
	}
yy366:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy372;
	default:	goto yy316;
	}
yy367:
	YYSKIP ();
#line 331 "request.re.c"
	{ id=1<<5; goto lbl_end;}
#line 3347 "<stdout>"
yy369:
	YYSKIP ();
#line 329 "request.re.c"
	{ id=1<<3; goto lbl_end;}
#line 3352 "<stdout>"
yy371:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy374;
	default:	goto yy316;
	}
yy372:
	YYSKIP ();
#line 332 "request.re.c"
	{ id=1<<6; goto lbl_end;}
#line 3365 "<stdout>"
yy374:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'D':
	case 'd':	goto yy375;
	default:	goto yy316;
	}
yy375:
	YYSKIP ();
#line 333 "request.re.c"
	{ id=1<<7; goto lbl_end;}
#line 3378 "<stdout>"
}
#line 335 "request.re.c"

lbl_end:
   return id;
}

int check_type(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   
#line 3391 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy380;
	case 'P':
	case 'p':	goto yy382;
	default:	goto yy379;
	}
yy379:
#line 346 "request.re.c"
	{ id=0; goto lbl_end;}
#line 3406 "<stdout>"
yy380:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy383;
	default:	goto yy381;
	}
yy381:
	YYRESTORE ();
	goto yy379;
yy382:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'A':
	case 'a':	goto yy384;
	default:	goto yy381;
	}
yy383:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy385;
	default:	goto yy381;
	}
yy384:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'Y':
	case 'y':	goto yy386;
	default:	goto yy381;
	}
yy385:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'C':
	case 'c':	goto yy387;
	default:	goto yy381;
	}
yy386:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'M':
	case 'm':	goto yy388;
	default:	goto yy381;
	}
yy387:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy389;
	default:	goto yy381;
	}
yy388:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'E':
	case 'e':	goto yy390;
	default:	goto yy381;
	}
yy389:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'L':
	case 'l':	goto yy391;
	default:	goto yy381;
	}
yy390:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'N':
	case 'n':	goto yy393;
	default:	goto yy381;
	}
yy391:
	YYSKIP ();
#line 348 "request.re.c"
	{ id=1<<2; goto lbl_end;}
#line 3494 "<stdout>"
yy393:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'T':
	case 't':	goto yy394;
	default:	goto yy381;
	}
yy394:
	YYSKIP ();
#line 347 "request.re.c"
	{ id=1; goto lbl_end;}
#line 3507 "<stdout>"
}
#line 349 "request.re.c"

lbl_end:
   return id;
}

int check_int(const char * cursor, const char * const limit)
{
   int id=0;
   
#line 3519 "<stdout>"
{
	YYCTYPE yych;
	yych = YYPEEK ();
	switch (yych) {
	case '!':
	case '$':
	case '&':
	case '\'':
	case '(':
	case ')':
	case '*':
	case '+':
	case '-':
	case '.':
	case '/':
	case ':':
	case ';':
	case '=':
	case '?':
	case '@':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':
	case '~':	goto yy399;
	case '0':	goto yy402;
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy404;
	default:	goto yy398;
	}
yy398:
#line 359 "request.re.c"
	{ id=0; goto lbl_end;}
#line 3609 "<stdout>"
yy399:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '!':
	case '$':
	case '&':
	case '\'':
	case '(':
	case ')':
	case '*':
	case '+':
	case '-':
	case '.':
	case '/':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case ':':
	case ';':
	case '=':
	case '?':
	case '@':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':
	case '~':	goto yy399;
	default:	goto yy401;
	}
yy401:
#line 362 "request.re.c"
	{ id=0; goto lbl_end;}
#line 3699 "<stdout>"
yy402:
	YYSKIP ();
	switch ((yych = YYPEEK ())) {
	case '!':
	case '$':
	case '&':
	case '\'':
	case '(':
	case ')':
	case '*':
	case '+':
	case '-':
	case '.':
	case '/':
	case ':':
	case ';':
	case '=':
	case '?':
	case '@':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':
	case '~':	goto yy399;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy406;
	default:	goto yy403;
	}
yy403:
#line 361 "request.re.c"
	{ id=1; goto lbl_end;}
#line 3788 "<stdout>"
yy404:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '!':
	case '$':
	case '&':
	case '\'':
	case '(':
	case ')':
	case '*':
	case '+':
	case '-':
	case '.':
	case '/':
	case ':':
	case ';':
	case '=':
	case '?':
	case '@':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':
	case '~':	goto yy399;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy404;
	default:	goto yy403;
	}
yy406:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '!':
	case '$':
	case '&':
	case '\'':
	case '(':
	case ')':
	case '*':
	case '+':
	case '-':
	case '.':
	case '/':
	case ':':
	case ';':
	case '=':
	case '?':
	case '@':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':
	case '~':	goto yy399;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy406;
	default:	goto yy408;
	}
yy408:
#line 360 "request.re.c"
	{ id=0; goto lbl_end;}
#line 3964 "<stdout>"
}
#line 363 "request.re.c"

lbl_end:
   return id;
}

int check_date(const char * cursor, const char * const limit)
{
   const char * marker;
   int id=0;
   
#line 3977 "<stdout>"
{
	YYCTYPE yych;
	YYBACKUP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy412;
	default:	goto yy411;
	}
yy411:
#line 376 "request.re.c"
	{ id=0; goto lbl_end;}
#line 3998 "<stdout>"
yy412:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy414;
	default:	goto yy413;
	}
yy413:
	YYRESTORE ();
	goto yy411;
yy414:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy415;
	default:	goto yy413;
	}
yy415:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy416;
	default:	goto yy413;
	}
yy416:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '-':	goto yy417;
	default:	goto yy413;
	}
yy417:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy418;
	default:	goto yy413;
	}
yy418:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy419;
	default:	goto yy413;
	}
yy419:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '-':	goto yy420;
	default:	goto yy413;
	}
yy420:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy421;
	default:	goto yy413;
	}
yy421:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy422;
	default:	goto yy413;
	}
yy422:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case ' ':	goto yy423;
	case 'T':
	case 't':	goto yy424;
	default:	goto yy413;
	}
yy423:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy425;
	default:	goto yy413;
	}
yy424:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy426;
	default:	goto yy413;
	}
yy425:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy427;
	default:	goto yy413;
	}
yy426:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy428;
	default:	goto yy413;
	}
yy427:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case ':':	goto yy429;
	default:	goto yy413;
	}
yy428:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case ':':	goto yy430;
	default:	goto yy413;
	}
yy429:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy431;
	default:	goto yy413;
	}
yy430:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy432;
	default:	goto yy413;
	}
yy431:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy433;
	default:	goto yy413;
	}
yy432:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy434;
	default:	goto yy413;
	}
yy433:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case ':':	goto yy435;
	default:	goto yy413;
	}
yy434:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case ':':	goto yy436;
	default:	goto yy413;
	}
yy435:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy437;
	default:	goto yy413;
	}
yy436:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy438;
	default:	goto yy413;
	}
yy437:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy439;
	default:	goto yy413;
	}
yy438:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy440;
	default:	goto yy413;
	}
yy439:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '.':	goto yy441;
	default:	goto yy413;
	}
yy440:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '.':	goto yy442;
	default:	goto yy413;
	}
yy441:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy443;
	default:	goto yy413;
	}
yy442:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy444;
	default:	goto yy413;
	}
yy443:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy445;
	default:	goto yy413;
	}
yy444:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy446;
	default:	goto yy413;
	}
yy445:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy447;
	default:	goto yy413;
	}
yy446:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy449;
	default:	goto yy413;
	}
yy447:
	YYSKIP ();
#line 378 "request.re.c"
	{ id=1; goto lbl_end;}
#line 4471 "<stdout>"
yy449:
	YYSKIP ();
	yych = YYPEEK ();
	switch (yych) {
	case 'Z':
	case 'z':	goto yy450;
	default:	goto yy413;
	}
yy450:
	YYSKIP ();
#line 377 "request.re.c"
	{ id=1; goto lbl_end;}
#line 4484 "<stdout>"
}
#line 379 "request.re.c"

lbl_end:
   return id;
}


int validate_json(jsonEntry *je,const char*json,int validate)
{
    int r,i,id=0,size,items,entries,ret;
    jsmn_parser p;
    jsmntok_t tokens[MAX_TOKENS];
    item_list *il;
    transaction_list *tl;
    memset(&tokens,0,sizeof tokens);
    jsmn_init(&p);
    r = jsmn_parse(&p, json, strlen(json), tokens, MAX_TOKENS);
    switch(r)
    {
        case JSMN_ERROR_NOMEM: 
			IFDBG printf("parser ERROR:Not enough tokens were provided\n");
            return JSMN_ERROR_NOMEM;
        case JSMN_ERROR_INVAL: 
			IFDBG printf("Invalid character inside JSON string\n");
            return JSMN_ERROR_INVAL;
        case JSMN_ERROR_PART : 
			IFDBG printf("The string is not a full JSON packet, more bytes expected\n");
            return JSMN_ERROR_PART;
    }
    //r == numero de tokens parseados
    i=0;
    while(i<r)
    {
        size=(tokens[i]).size;
        IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);

        iNC(i);
        while(size--)
        {
            id=parse_id((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]);
            IFDBG printf("token id[%d]%*.*s\n",id,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
            switch(id)
            {
                case ID          :
                    IFDBG printf("match ID.\n");
                    iNC(i);
                    if(validate && !check_uuid((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                    {
                        IFDBG printf("invalid UUID.\n");
                        return -2;
                    }
                    je->id.start=tokens[i].start;
                    je->id.end=tokens[i].end;
                    iNC(i);
                    break;
                case NUMBER      :
                    IFDBG printf("match NUMBER.\n");
                    iNC(i);
                    je->number.start=tokens[i].start;
                    je->number.end=tokens[i].end;
                    iNC(i);
                    break;
                case REFERENCE   :
                    IFDBG printf("match REFERENCE.\n");
                    iNC(i);
                    je->reference.start=tokens[i].start;
                    je->reference.end=tokens[i].end;
                    iNC(i);
                    break;
                case STATUS      :
                    IFDBG printf("match STATUS.\n");
                    iNC(i);
                    if(validate && !check_status((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                    {
                        IFDBG printf("invalid STATUS.\n");
                        return -2;
                    }
                    je->status.start=tokens[i].start;
                    je->status.end=tokens[i].end;
                    iNC(i);
                    break;
                case CREATED_AT  :
                    IFDBG printf("match CREATED_AT.\n");
                    iNC(i);
                    if(validate && !check_date((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                    {
                        IFDBG printf("invalid CREATED_AT.\n");
                        return -2;
                    }
                    je->created_at.start=tokens[i].start;
                    je->created_at.end=tokens[i].end;
                    iNC(i);
                    break;
                case UPDATED_AT  :
                    IFDBG printf("match UPDATED_AT.\n");
                    iNC(i);
                    if(validate && !check_date((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                    {
                        IFDBG printf("invalid UPDATED_AT.\n");
                        return -2;
                    }
                    je->updated_at.start=tokens[i].start;
                    je->updated_at.end=tokens[i].end;
                    iNC(i);
                    break;
                case ITEMS       :
                    IFDBG printf("match ITEMS:\n");
                    iNC(i);
                    items=(tokens[i]).size;
                    IFDBG printf("ARRAY[%d]\n",items);
                    iNC(i);

                    while(items)
                    {
                        il=(item_list*)calloc(1,sizeof(item_list));
                        if(je->items==NULL)
                        {
                            je->items=il;
                        }else{
                            il->next = je->items;
                            je->items = il;
                        }
                        IFDBG printf("ITEMS[%d]\n",items);
                        IFDBG printf("1 tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                        entries=(tokens[i]).size;
                        iNC(i);
                        IFDBG printf("3 tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);

                        while(entries)
                        {
                            IFDBG printf("ENTRY[%d]\n",entries);
                            ret=parse_items((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]);
                            switch(ret)
                            {
                                case SKU        :
                                    IFDBG printf("match ITEM SKU.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    if(validate && !check_uuid((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                                    {
                                        IFDBG printf("invalid UUID on ITEM SKU.\n");
                                        return -2;
                                    }
                                    il->i.sku.start=tokens[i].start;
                                    il->i.sku.end=tokens[i].end;
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    break;
                                case UNIT_PRICE :
                                    IFDBG printf("match ITEM UNIT_PRICE.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    if(validate && !check_int((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                                    {
                                        IFDBG printf("invalid INTEGER on ITEM UNIT_PRICE.\n");
                                        return -2;
                                    }
                                    il->i.unit_price.start=tokens[i].start;
                                    il->i.unit_price.end=tokens[i].end;
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    break;
                                case QUANTITY   :
                                    IFDBG printf("match ITEM QUANTITY.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    if(validate && !check_int((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                                    {
                                        IFDBG printf("invalid INTEGER on ITEM QUANTITY.\n");
                                        return -2;
                                    }
                                    il->i.quantity.start=tokens[i].start;
                                    il->i.quantity.end=tokens[i].end;
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    break;
                                default:
                                    IFDBG printf("INVALID ENTRY[%d]\n",entries);
                                    return -2;
                            }
                            --entries;
                            IFDBG printf("--e tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                        }
                        --items;
                        IFDBG printf("--i tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                    }
                    break;
                case NOTES       :
                    IFDBG printf("match NOTES.\n");
                    iNC(i);
                    je->notes.start=tokens[i].start;
                    je->notes.end=tokens[i].end;
                    iNC(i);
                    break;
                case TRANSACTIONS:
                    IFDBG printf("match ITEMS:\n");
                    iNC(i);
                    items=(tokens[i]).size;
                    IFDBG printf("ARRAY[%d]\n",items);
                    iNC(i);
                    while(items)
                    {
                        IFDBG printf("ITEMS[%d]\n",items);
                        IFDBG printf("1 tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                        entries=(tokens[i]).size;
                        iNC(i);
                        IFDBG printf("2 tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                        tl=(transaction_list*)calloc(1,sizeof(transaction_list));
                        if(je->transactions==NULL)
                        {
                            je->transactions=tl;
                        }else{
                            tl->next = je->transactions;
                            je->transactions = tl;
                        }
                        while(entries)
                        {
                            IFDBG printf("ENTRY[%d]\n",entries);
                            ret=parse_transactions((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]);
                            IFDBG printf("3 tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                            switch(ret)
                            {
                                case TID :
                                    IFDBG printf("match TRANSACTION ID.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    if(validate && !check_uuid((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                                    {
                                        IFDBG printf("invalid UUID on TRANSACTION ID.\n");
                                        return -2;
                                    }
                                    tl->t.tid.start=tokens[i].start;
                                    tl->t.tid.end=tokens[i].end;
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    break;
                                case EXTERNAL_ID :
                                    IFDBG printf("match TRANSACTION EXTERNAL_ID.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    //check here!
                                    tl->t.external_id.start=tokens[i].start;
                                    tl->t.external_id.end=tokens[i].end;
                                    iNC(i);
                                    break;
                                case AMOUNT   :
                                    IFDBG printf("match TRANSACTION AMOUNT.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    if(validate && !check_int((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                                    {
                                        IFDBG printf("invalid INTEGER on TRANSACTION AMOUNT.\n");
                                        return -2;
                                    }
                                    tl->t.amount.start=tokens[i].start;
                                    tl->t.amount.end=tokens[i].end;
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    break;
                                case TYPE :
                                    IFDBG printf("match TRANSACTION TYPE.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    //check here!
                                    tl->t.type.start=tokens[i].start;
                                    tl->t.type.end=tokens[i].end;
                                    iNC(i);
                                    break;
                                case AUTHORIZATION_CODE :
                                    IFDBG printf("match TRANSACTION AUTHORIZATION_CODE.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    //check here!
                                    tl->t.authorization_code.start=tokens[i].start;
                                    tl->t.authorization_code.end=tokens[i].end;
                                    iNC(i);
                                    break;
                                case CARD_BRAND :
                                    IFDBG printf("match TRANSACTION CARD_BRAND.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    //check here!
                                    tl->t.card_brand.start=tokens[i].start;
                                    tl->t.card_brand.end=tokens[i].end;
                                    iNC(i);
                                    break;
                                case CARD_BIN :
                                    IFDBG printf("match TRANSACTION CARD_BIN.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    //check here!
                                    tl->t.card_bin.start=tokens[i].start;
                                    tl->t.card_bin.end=tokens[i].end;
                                    iNC(i);
                                    break;
                                case CARD_LAST :
                                    IFDBG printf("match TRANSACTION CARD_LAST.\n");
                                    IFDBG printf(".tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                                    iNC(i);
                                    //check here!
                                    tl->t.card_last.start=tokens[i].start;
                                    tl->t.card_last.end=tokens[i].end;
                                    iNC(i);
                                    break;
                                default:
                                    IFDBG printf("INVALID ENTRY[%d]\n",entries);
                                    return -2;
                            }
                            --entries;
                            IFDBG printf("--e tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                        }
                        --items;
                        IFDBG printf("--i tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                    }
                    break;
                case PRICE       :
                    IFDBG printf("match PRICE.\n");
                    iNC(i);
                    if(validate && !check_int((const char*)&json[tokens[i].start],(const char*)&json[tokens[i].end]))
                    {
                        IFDBG printf("invalid PRICE.\n");
                        return -2;
                    }
                    je->price.start=tokens[i].start;
                    je->price.end=tokens[i].end;
                    iNC(i);
                    break;
                default:
                    IFDBG printf("NO match.\n");
                    IFDBG printf("tokens[%d]child[%d]=%*.*s\n",i,(tokens[i]).size,0,(tokens[i]).end-(tokens[i]).start,json+(tokens[i]).start);
                    return -2;
            }
        }
    }
   return 0;
}

void print_json(jsonEntry *e,const char*js)
{
    item_list *il;
    transaction_list *tl;
    prn_entry(id)
    prn_entry(number)
    prn_entry(reference)
    prn_entry(status)
    prn_entry(created_at)
    prn_entry(updated_at)
    //items
    il=e->items;
    while(il!=NULL)
    {
        printf("item=\n");
        prn_item(sku)
        prn_item(unit_price)
        prn_item(quantity)
        il=il->next;
    }
    prn_entry(notes)
    //transactions
    tl=e->transactions;
    while(tl!=NULL)
    {
        printf("transaction=\n");
        prn_transaction(tid)
        prn_transaction(external_id);
        prn_transaction(amount);
        prn_transaction(type);
        prn_transaction(authorization_code);
        prn_transaction(card_brand);
        prn_transaction(card_bin);
        prn_transaction(card_last);
        tl=tl->next;
    }
    prn_entry(price)
}

void clear_json(jsonEntry *e)
{
    item_list *il;
    transaction_list *tl;
    il=e->items;
    while(e->items!=NULL)
    {
        il=e->items->next;
        free(e->items);
        e->items=il;
    }
    while(e->transactions!=NULL)
    {
        tl=e->transactions->next;
        free(e->transactions);
        e->transactions=tl;
    }
    memset(e,0,sizeof(jsonEntry));
}

int analise_json(redisContext *c,jsonEntry *je,const char *js,int validate)
{
	int r;
	jsmn_parser p;
	jsmntok_t tokens[MAX_TOKENS];
	memset(&tokens,0,sizeof tokens);
	jsmn_init(&p);
	r = jsmn_parse(&p, js, strlen(js), tokens, MAX_TOKENS);
	switch(r)
	{
		case JSMN_ERROR_NOMEM: 
			IFDBG printf("parser ERROR:tokens insuficientes\n");
			return JSMN_ERROR_NOMEM;
		case JSMN_ERROR_INVAL: 
			IFDBG printf("Caracter invalido dentro da JSON string\n");
			return JSMN_ERROR_INVAL;
		case JSMN_ERROR_PART : 
			IFDBG printf("A string nao eh um pacote JSON completo, mais bytes esperados!\n");
			IFDBG printf("json[%s]\n",js);
			return JSMN_ERROR_PART;
	}	
	//r == numero de tokens parseados
	memset(je,0,sizeof(jsonEntry));
	validate_json(je,js,validate);
	//print_json(je,js);
	
	return JSMN_SUCCESS;
}


void appendJsonElementStr(char* json, char* elementName, char* element, int* jsonLen)
{
  if(*jsonLen != 0)
  {
    char last = json[*jsonLen-1];
    if(last != '{' && last != '[')
    {
      strcat(json+(*jsonLen), ",");
      (*jsonLen)++;
    }
  }
  strcat(json+(*jsonLen), "\"");
  strcat(json+(*jsonLen), elementName);
  strcat(json+(*jsonLen), "\":\"");
  strcat(json+(*jsonLen), element);
  strcat(json+(*jsonLen), "\"");
  (*jsonLen) += (strlen(elementName)+strlen(element)+5);
}

void openJsonObj(char* json, char* objName, int* jsonLen)
{
  if(*jsonLen != 0)
  {
    char last = json[(*jsonLen)-1];
    if(last != '{' && last != '[')
    {
      strcat(json+(*jsonLen), ",");
      (*jsonLen)++; 
    }
  }
  if(objName != NULL)
  {
    strcat(json+(*jsonLen), "\"");
    strcat(json+(*jsonLen), objName);
    strcat(json+(*jsonLen), "\":");
    (*jsonLen)+=(strlen(objName)+3);
  }
  strcat(json+(*jsonLen), "{");
  (*jsonLen)++;
}

void closeJsonObj(char* json, int*jsonLen)
{
  strcat(json+(*jsonLen), "}");
  (*jsonLen)++;
}

void openJsonArray(char* json, char* arrayName, int*jsonLen)
{
  strcat(json+(*jsonLen), "\"");
  strcat(json+(*jsonLen), arrayName);
  strcat(json+(*jsonLen), "\":[");
  (*jsonLen)+=(strlen(arrayName)+4);
}

void closeJsonArray(char* json, int*jsonLen)
{
  strcat(json+(*jsonLen), "]");
  (*jsonLen)++;
}

void get_by_id(redisContext *c, char*json, char* id, int*jsonLen)
{
    unsigned int j;
    redisReply *reply;
  
    printf("get_by_id request %s\n",id);
    reply = (redisReply *)redisCommand(c,"HGETALL %s",id);
    for (j = 1; j < reply->elements; j+=2) {
        printf("%u)REDIS_REPLY_ARRAY %s\n", j+1, reply->element[j]->str);
        appendJsonElementStr(json, reply->element[j-1]->str, reply->element[j]->str,jsonLen);
    }
    //printf("\n%s\n",json);
    freeReplyObject(reply);
}

void get_by_id(redisContext *c, char*json, char* id)
{
  int jsonLen=0;
  get_by_id(c,json,id,&jsonLen);
}

void process_order_id(redisContext *c, redisReply *reply, char*json,int*jsonLen)
{
  openJsonObj(json, NULL, jsonLen);
  openJsonArray(json, "orders", jsonLen);
  for (int j = 0; j < reply->elements; j++) {
      openJsonObj(json, NULL, jsonLen);
      printf("\t.%u)REDIS_REPLY_ARRAY %s\n", j+1, reply->element[j]->str);
      appendJsonElementStr(json, "id", 6+reply->element[j]->str, jsonLen);
      get_by_id(c,json, reply->element[j]->str, jsonLen);
      closeJsonObj(json, jsonLen);
  }
  closeJsonArray(json, jsonLen);
  closeJsonObj(json, jsonLen);
  //printf("\n%s\n", json);
}

void get_all(redisContext *c, char*result)
{
	unsigned int j;
	char command[128];
	unsigned int cursor = 0;
	redisReply *reply;
	int jsonLen = 0;


  do
  {
    sprintf(command, "SCAN %d MATCH order:*", cursor);
    reply = (redisReply *)redisCommand(c,command);
    cursor = atoi(reply->element[0]->str);
    
    for (j = 1; j < reply->elements; j++)
    {
	  printf("%u)REDIS_REPLY_ARRAY %s\n", j+1, reply->element[j]->str);
      process_order_id(c, reply->element[j], result, &jsonLen);
    }

  } while(cursor != 0);

  printf("\n%s\n",result);
  freeReplyObject(reply);
	
}
void get_by_value(redisContext *c,char*result)
{
	unsigned int j;
	char command[128];
	unsigned int cursor = 0;
	redisReply *reply;
	int jsonLen = 0;
  do
  {
    sprintf(command, "SCAN %d MATCH order:*", cursor);
    reply = (redisReply *)redisCommand(c,command);
	if(reply)
	{
    cursor = reply->element[0]->str[0] - '0';
    for (j = 1; j < reply->elements; j++)
    {
		printf("%u)REDIS_REPLY_ARRAY %s\n", j+1, reply->element[j]->str);
		process_order_id(c, reply->element[j], result, &jsonLen);
    }
	}

  } while(cursor != 0);

  
  freeReplyObject(reply);
}

void get_items(redisContext *c)
{
	unsigned int j;
	redisReply *reply;
	//GET /orders/b8d36032-42d9-11e6-9d7c-f04da2e5162d/items

	//LLEN order:b8d36032-42d9-11e6-9d7c-f04da2e5162d.items
	//LRANGE order:b8d36032-42d9-11e6-9d7c-f04da2e5162d.items 0 %len%-1
	
    reply = (redisReply *)redisCommand(c,"SCAN 0 MATCH order:*");
    if (reply->type == REDIS_REPLY_ARRAY) {
        for (j = 0; j < reply->elements; j++) {
            printf("%u) %s\n", j, reply->element[j]->str);
        }
    }
    freeReplyObject(reply);
}
void get_transactions(redisContext *c)
{
	unsigned int j;
	redisReply *reply;
	//GET /orders/b8d36032-42d9-11e6-9d7c-f04da2e5162d/transactions

	//LLEN order:b8d36032-42d9-11e6-9d7c-f04da2e5162d.transactions
	//LRANGE order:b8d36032-42d9-11e6-9d7c-f04da2e5162d.transactions 0 %len%-1
    reply = (redisReply *)redisCommand(c,"SCAN 0 MATCH order:*");
    if (reply->type == REDIS_REPLY_ARRAY) {
        for (j = 0; j < reply->elements; j++) {
            printf("%u) %s\n", j, reply->element[j]->str);
        }
    }
    freeReplyObject(reply);
}
void post(redisContext *c,jsonEntry *je)
{
    int ret;
    char uuid_str[37];
	  redisReply *reply;
	  ret=gen_uuid((char*)uuid_str);
	  if(!ret)
	  {
	    printf("post failed to generate UUID!\n");
	  }else{
	    IFDBG printf("post new UUID [%s]\n",(char*)uuid_str);
	  }
    reply = (redisReply *)redisCommand(c,"MULTI");
	printf("MULTI reply %s\n", reply->str);
    freeReplyObject(reply);
	
	//HMSET order:b8d36032-42d9-11e6-9d7c-f04da2e5162d status DRAFT created_at 35468461516514 updated_at 35468461516514 price 1000
    reply = (redisReply *)redisCommand(c,"HMSET order:%s status %s created_at %s updated_at %s price %s"
		,(char*)uuid_str//"b8d36032-42d9-11e6-9d7c-f04da2e5162d"
		,"DRAFT"
		,"35468461516514"
		,"35468461516514"
		,"1000");
	printf("HMSET reply %s\n", reply->str);
    freeReplyObject(reply);
	
	//RPUSH order:b8d36032-42d9-11e6-9d7c-f04da2e5162d.items dfg9087er908t7 100 3 |
    reply = (redisReply *)redisCommand(c,"RPUSH order:%s.items %s %s %s |"
		,(char*)uuid_str//"b8d36032-42d9-11e6-9d7c-f04da2e5162d"
		,"dfg9087er908t7"
		,"100"
		,"3");
	printf("RPUSH reply %s\n", reply->str);
    freeReplyObject(reply);
	
	/*
	"         \"id\" : \"b8d36032-42d9-11e6-9d7c-f04da2e5162d\"," +
	"         \"external_id\" : \"sbrubles\"," +
	"         \"amount\" : 1000," +
	"         \"type\" : \"PAYMENT|CANCEL\"," +
	"         \"authorization_code\" : \"94721719\"," +
	"         \"card_brand\" : \"AMEX\" ," +
	"         \"card_bin\" : \"710\"," +
	"         \"card_last\" : \"4749\"" +
	"      } " +
	*/
	//RPUSH order:b8d36032-42d9-11e6-9d7c-f04da2e5162d.transactions ... |
    reply = (redisReply *)redisCommand(c,"RPUSH order:%s.transactions id %s external_id %s|"
		,(char*)uuid_str//"b8d36032-42d9-11e6-9d7c-f04da2e5162d"
		,"b8d36032-42d9-11e6-9d7c-f04da2e5162c"
		, "sbrubles");
	printf("RPUSH reply %s\n", reply->str);
    freeReplyObject(reply);
	
  reply = (redisReply *)redisCommand(c,"EXEC");
	printf("EXEC reply %s\n", reply->str);
  freeReplyObject(reply);
	
}




void delete_all(redisContext *c)
{
	redisReply *reply;
	//DELETE /orders
    reply = (redisReply *)redisCommand(c,"FLUSHALL");
	printf("FLUSHALL reply %s\n", reply->str);
    freeReplyObject(reply);
}
int handle_request(redisContext *c,const char*method,const char*url,const char*body,int validate,char*result)
{
	jsonEntry je;
	request r;
	int ret;
    ret=parse_method(method,method+strlen(method));
    if(!ret)
		return -1;
	switch(ret)
	{
	    case GET_METHOD   :
		{
			printf("GET method\n");
			ret=parse_get_url(url,url+strlen(url),&r);
			if(!ret)
				return -2;



			switch(ret)
			{
				case GET_ALL:
					printf("GET ALL\n");
					get_all(c,result);
					break;
				case GET_BY_VALUE:
					printf("GET BY VALUE\n");
					get_by_value(c,result);
					break;
				case GET_BY_ID:{
			        char id[128];
			        memcpy( id, url, r.id.start );
			        id[r.id.end+1] = '\0';
					printf("GET BY ID\n");
					get_by_id(c,result, id);
					break;
				}
				case GET_ITEMS:
					printf("GET ITEMS\n");
					get_items(c);
					break;
				case GET_TRANSACTIONS:
					printf("GET TRANSACTIONS\n");
					get_transactions(c);
					break;
			}
			break;
		}
	    case POST_METHOD  : 
		{
			printf("POST method\n");
			
			ret=analise_json(c,&je,body,validate);
		    if(ret!=JSMN_SUCCESS)
			{
				clear_json(&je);
		        return -3;
			}
			//handle_post
			post(c,&je);
			clear_json(&je);
			break;
		}
	    case PUT_METHOD   : 
		{
			printf("PUT method\n");
			ret=parse_put_url(url,url+strlen(url),&r);
			if(!ret)
				return -2;
			switch(ret)
			{
				case PUT_ALL:
					printf("PUT ALL\n");
					break;
				case PUT_BY_ID:
					printf("PUT BY ID\n");
					break;
				case PUT_TRANSACTIONS:
					printf("PUT TRANSACTIONS\n");
					break;
			}
			ret=analise_json(c,&je,body,validate);
		    if(ret!=JSMN_SUCCESS)
			{
				clear_json(&je);
		        return -3;
			}
			//handle put
			clear_json(&je);
			break;
		}
	    case DELETE_METHOD: 
		{
			printf("DELETE method\n");
			//handle_delete
			delete_all(c);
			break;
		}
	}
	return 0;	
}
